name: Deploy .NET 8 Lambda with Role Creation

on: [push]

env:
  AWS_REGION: 'ap-south-1'
  LAMBDA_NAME: 'Awstestingyml'
  ROLE_NAME: 'Aws_lambda_github_actions1'
  ENV_VAR_1: "GitHubActionValue1"
  ENV_VAR_2: "GitHubActionValue2"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup .NET 8
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Install Lambda Tools
      run: |
        dotnet tool install -g Amazon.Lambda.Tools
        echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create IAM Role if Not Exists
      run: |
        # Check if role exists
        if ! aws iam get-role --role-name ${{ env.ROLE_NAME }} > /dev/null 2>&1; then
          echo "Creating IAM role..."
          aws iam create-role \
            --role-name ${{ env.ROLE_NAME }} \
            --assume-role-policy-document '{
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Principal": {"Service": "lambda.amazonaws.com"},
                "Action": "sts:AssumeRole"
              }]
            }'
          
          # Wait for role to be created
          sleep 10
          
          # Attach policies
          aws iam attach-role-policy \
            --role-name ${{ env.ROLE_NAME }} \
            --policy-arn arn:aws:iam::aws:policy/AWSLambda_FullAccess
            
          aws iam attach-role-policy \
            --role-name ${{ env.ROLE_NAME }} \
            --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        else
          echo "Role already exists"
        fi

    - name: Deploy Lambda Function
      run: |
        cd Lambdas/Awstestingyml
        dotnet lambda deploy-function ${{ env.LAMBDA_NAME }} \
          --function-runtime dotnet8 \
          --region ${{ env.AWS_REGION }} \
          --disable-interactive true \
          --role arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ env.ROLE_NAME }} \
          --environment-variables "ENV_VAR_1=${{ env.ENV_VAR_1 }},ENV_VAR_2=${{ env.ENV_VAR_2 }}"

    - name: Verify Deployment
      run: |
        aws lambda get-function \
          --function-name ${{ env.LAMBDA_NAME }} \
          --region ${{ env.AWS_REGION }}